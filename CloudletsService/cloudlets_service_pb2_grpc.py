# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

from CloudletsService import cloudlets_service_pb2 as CloudletsService_dot_cloudlets__service__pb2


class CloudletsAPIStub(object):
    """Методы, которые предоставляет Cloudlets Service
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Add = channel.unary_unary(
                '/CloudletsAPI/Add',
                request_serializer=CloudletsService_dot_cloudlets__service__pb2.Cloudlet.SerializeToString,
                response_deserializer=CloudletsService_dot_cloudlets__service__pb2.ResponseWithCloudlet.FromString,
                )
        self.Find = channel.unary_unary(
                '/CloudletsAPI/Find',
                request_serializer=CloudletsService_dot_cloudlets__service__pb2.Cloudlet.SerializeToString,
                response_deserializer=CloudletsService_dot_cloudlets__service__pb2.ResponseWithCloudletsList.FromString,
                )
        self.FindNearest = channel.unary_unary(
                '/CloudletsAPI/FindNearest',
                request_serializer=CloudletsService_dot_cloudlets__service__pb2.Cloudlet.SerializeToString,
                response_deserializer=CloudletsService_dot_cloudlets__service__pb2.ResponseWithCloudletsList.FromString,
                )


class CloudletsAPIServicer(object):
    """Методы, которые предоставляет Cloudlets Service
    """

    def Add(self, request, context):
        """Missing associated documentation comment in .proto file"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Find(self, request, context):
        """Missing associated documentation comment in .proto file"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def FindNearest(self, request, context):
        """Missing associated documentation comment in .proto file"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_CloudletsAPIServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Add': grpc.unary_unary_rpc_method_handler(
                    servicer.Add,
                    request_deserializer=CloudletsService_dot_cloudlets__service__pb2.Cloudlet.FromString,
                    response_serializer=CloudletsService_dot_cloudlets__service__pb2.ResponseWithCloudlet.SerializeToString,
            ),
            'Find': grpc.unary_unary_rpc_method_handler(
                    servicer.Find,
                    request_deserializer=CloudletsService_dot_cloudlets__service__pb2.Cloudlet.FromString,
                    response_serializer=CloudletsService_dot_cloudlets__service__pb2.ResponseWithCloudletsList.SerializeToString,
            ),
            'FindNearest': grpc.unary_unary_rpc_method_handler(
                    servicer.FindNearest,
                    request_deserializer=CloudletsService_dot_cloudlets__service__pb2.Cloudlet.FromString,
                    response_serializer=CloudletsService_dot_cloudlets__service__pb2.ResponseWithCloudletsList.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'CloudletsAPI', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class CloudletsAPI(object):
    """Методы, которые предоставляет Cloudlets Service
    """

    @staticmethod
    def Add(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/CloudletsAPI/Add',
            CloudletsService_dot_cloudlets__service__pb2.Cloudlet.SerializeToString,
            CloudletsService_dot_cloudlets__service__pb2.ResponseWithCloudlet.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Find(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/CloudletsAPI/Find',
            CloudletsService_dot_cloudlets__service__pb2.Cloudlet.SerializeToString,
            CloudletsService_dot_cloudlets__service__pb2.ResponseWithCloudletsList.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def FindNearest(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/CloudletsAPI/FindNearest',
            CloudletsService_dot_cloudlets__service__pb2.Cloudlet.SerializeToString,
            CloudletsService_dot_cloudlets__service__pb2.ResponseWithCloudletsList.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)


class SchedulingAPIStub(object):
    """DONE Методы Scheduling Service, которыми пользуется Cloudlets Service
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.SwarmManager = channel.unary_unary(
                '/SchedulingAPI/SwarmManager',
                request_serializer=CloudletsService_dot_cloudlets__service__pb2.Empty.SerializeToString,
                response_deserializer=CloudletsService_dot_cloudlets__service__pb2.ResponseWithManager.FromString,
                )


class SchedulingAPIServicer(object):
    """DONE Методы Scheduling Service, которыми пользуется Cloudlets Service
    """

    def SwarmManager(self, request, context):
        """Missing associated documentation comment in .proto file"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_SchedulingAPIServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'SwarmManager': grpc.unary_unary_rpc_method_handler(
                    servicer.SwarmManager,
                    request_deserializer=CloudletsService_dot_cloudlets__service__pb2.Empty.FromString,
                    response_serializer=CloudletsService_dot_cloudlets__service__pb2.ResponseWithManager.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'SchedulingAPI', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class SchedulingAPI(object):
    """DONE Методы Scheduling Service, которыми пользуется Cloudlets Service
    """

    @staticmethod
    def SwarmManager(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/SchedulingAPI/SwarmManager',
            CloudletsService_dot_cloudlets__service__pb2.Empty.SerializeToString,
            CloudletsService_dot_cloudlets__service__pb2.ResponseWithManager.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)
